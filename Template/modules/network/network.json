{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "2.8.0.0",
    "parameters": {
        "f5ResourceGroup": {
            "type": "string",
            "defaultValue": "f5rg"
        },
        "uniqueString": {
            "metadata": {
                "description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
            },
            "type": "string"
        },
        "createNatGateway": {
            "defaultValue": false,
            "metadata": {
                "description": "You must select Yes to create a NAT gateway to allow outbound access when deploying a standalone BIG-IP VE without a public management IP address. Note: The NAT gateway is applied to subnet0."
            },
            "type": "bool"
        },
        "numSubnets": {
            "defaultValue": 1,
            "type": "Int",
            "metadata": {
                "description": "Indicate the number of subnets to create."
            }
        },
        "vnetName": {
            "defaultValue": "virtualNetwork",
            "type": "string",
            "metadata": {
                "description": "Supply a name for virtual network."
            }
        },
        "vnetAddressPrefix": {
            "defaultValue": "10.0",
            "type": "string",
            "metadata": {
                "description": "Enter the start of the CIDR block used when creating the vnet and subnets.  You MUST type just the first two octets of the /16 virtual network that will be created, for example '10.0', '10.100', 192.168'."
            }
        },
        "vnetCidrNotation": {
            "defaultValue": "22",
            "type": "string",
            "metadata": {
                "description": "Enter the the value for the CIDR notation (ex. 16 for /16, 24 for /24) that will be applied to the subnets created within the virtual network."
            }
        },
        "subnetMask": {
            "defaultValue": "24",
            "type": "string",
            "metadata": {
                "description": "Enter the the value for the CIDR notation (ex. 16 for /16, 24 for /24) that will be applied to the subnets created within the virtual network."
            }
        },
        "tagValues": {
            "defaultValue": {
                "application": "f5demoapp",
                "cost": "f5cost",
                "environment": "f5env",
                "group": "f5group",
                "owner": "f5owner"
            },
            "type": "object",
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }
        },
        "nsg0": {
            "defaultValue": [
                {
                    "destinationPortRanges": [ "22", "8443" ],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                },
                {
                    "destinationPortRanges": [ "80", "443" ],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg1": {
            "defaultValue": [
                {
                    "destinationPortRanges": [ "80", "443" ],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        }
    },
    "variables": {
        "resourceDeploymentName": "[take(concat(deployment().name, '-network'), 64)]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('resourceDeploymentName')]",
            "resourceGroup": "[parameters('f5ResourceGroup')]",
            "dependsOn": [],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "uniqueString": {
                        "value": "[parameters('uniqueString')]"
                    },
                    "createNatGateway": {
                        "value": "[parameters('createNatGateway')]"
                    },
                    "numSubnets": {
                        "value": "[parameters('numSubnets')]"
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "vnetAddressPrefix": {
                        "value": "[parameters('vnetAddressPrefix')]"
                    },
                    "vnetCidrNotation": {
                        "value": "[parameters('vnetCidrNotation')]"
                    },
                    "subnetMask": {
                        "value": "[parameters('subnetMask')]"
                    },
                    "tagValues": {
                        "value": "[parameters('tagValues')]"
                    },
                    "nsg0": {
                        "value": "[parameters('nsg0')]"
                    },
                    "nsg1": {
                        "value": "[parameters('nsg1')]"
                    }
                },
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "uniqueString": {
                            "type": "string"
                        },
                        "createNatGateway": {
                            "type": "bool"
                        },
                        "numSubnets": {
                            "type": "int"
                        },
                        "vnetName": {
                            "type": "string"
                        },
                        "vnetAddressPrefix": {
                            "type": "string"
                        },
                        "vnetCidrNotation": {
                            "type": "string"
                        },
                        "subnetMask": {
                            "type": "string"
                        },
                        "tagValues": {
                            "type": "object"
                        },
                        "nsg0": {
                            "type": "array"
                        },
                        "nsg1": {
                            "type": "array"
                        }
                    },
                    "variables": {
                        "copy": [
                            {
                                "count": "[parameters('numSubnets')]",
                                "input": {
                                    "name": "[concat('subnet-0', copyIndex('constructSubnetArray', 1))]",
                                    "properties": {
                                        "addressPrefix": "[concat(parameters('vnetAddressPrefix'), '.', copyIndex('constructSubnetArray'),'.0/', parameters('subnetMask'))]",
                                        "routeTable": {
                                            "id": "[resourceId('Microsoft.Network/routeTables', concat('route-table-subnet-0', copyIndex('constructSubnetArray', 1)))]"
                                        },
                                        "natGateway": "[if(and(equals(copyIndex('constructSubnetArray'), 0), parameters('createNatGateway')), json(concat('{\"id\": \"', resourceId('Microsoft.Network/natGateways', variables('natGatewayName')), '\"}')), json('null'))]",
                                        "networkSecurityGroup": {
                                            "id": "[if(equals(copyIndex('constructSubnetArray'), 0), resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg0Name')), resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg1Name')))]"
                                        }
                                    }
                                },
                                "name": "constructSubnetArray"
                            },
                            {
                                "count": "[variables('nsg0Length')]",
                                "input": {
                                    "name": "[concat('nsg_01_allow_', copyIndex('constructNsg0Array'))]",
                                    "properties": {
                                        "access": "Allow",
                                        "description": "NSG1 Allow",
                                        "destinationAddressPrefix": "*",
                                        "destinationPortRanges": "[parameters('nsg0')[copyIndex('constructNsg0Array')].destinationPortRanges]",
                                        "direction": "Inbound",
                                        "priority": "[int(concat('10', copyIndex('constructNsg0Array')))]",
                                        "protocol": "[parameters('nsg0')[copyIndex('constructNsg0Array')].protocol]",
                                        "sourceAddressPrefix": "[parameters('nsg0')[copyIndex('constructNsg0Array')].sourceAddressPrefix]",
                                        "sourcePortRange": "*"
                                    }
                                },
                                "name": "constructNsg0Array"
                            },
                            {
                                "count": "[variables('nsg1Length')]",
                                "input": {
                                    "name": "[concat('nsg_02_allow_', copyIndex('constructNsg1Array'))]",
                                    "properties": {
                                        "access": "Allow",
                                        "description": "NSG2 Allow",
                                        "destinationAddressPrefix": "*",
                                        "destinationPortRanges": "[parameters('nsg1')[copyIndex('constructNsg1Array')].destinationPortRanges]",
                                        "direction": "Inbound",
                                        "priority": "[int(concat('10', copyIndex('constructNsg1Array')))]",
                                        "protocol": "[parameters('nsg1')[copyIndex('constructNsg1Array')].protocol]",
                                        "sourceAddressPrefix": "[parameters('nsg1')[copyIndex('constructNsg1Array')].sourceAddressPrefix]",
                                        "sourcePortRange": "*"
                                    }
                                },
                                "name": "constructNsg1Array"
                            }
                        ],
                        "uniqueString": "[toLower(parameters('uniqueString'))]",
                        "natGatewayName": "[concat(parameters('vnetName'), '-vgw')]",
                        "natGatewayPublicIpName": "[concat(parameters('vnetName'), '-vgw-pip-01')]",
                        "emptyArray": [],
                        "nsg0Array": "[variables('constructNsg0Array')]",
                        "nsg0Id": "[if(greater(variables('nsg0Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg0Name'))), variables('emptyArray'))]",
                        "nsg0Length": "[length(parameters('nsg0'))]",
                        "nsg0Name": "[concat(variables('uniqueString'), '-nsg-01')]",
                        "nsg1Array": "[variables('constructNsg1Array')]",
                        "nsg1Id": "[if(greater(variables('nsg1Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg1Name'))), variables('emptyArray'))]",
                        "nsg1Length": "[length(parameters('nsg1'))]",
                        "nsg1Name": "[concat(variables('uniqueString'), '-nsg-02')]",
                        "outboundNsgRule": [
                            {
                                "name": "allow_loadBalancer_traffic",
                                "properties": {
                                    "access": "Allow",
                                    "description": "Outbound traffic through load balancer",
                                    "destinationAddressPrefix": "AzureLoadBalancer",
                                    "destinationPortRange": "*",
                                    "direction": "Outbound",
                                    "priority": 200,
                                    "protocol": "Tcp",
                                    "sourceAddressPrefix": "*",
                                    "sourcePortRange": "*"
                                }
                            }
                        ]
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/networkSecurityGroups",
                            "apiVersion": "2020-06-01",
                            "name": "[variables('nsg0Name')]",
                            "location": "[resourceGroup().location]",
                            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
                            "properties": {
                                "securityRules": "[variables('nsg0Array')]"
                            },
                            "condition": "[not(empty(parameters('nsg0')))]"
                        },
                        {
                            "type": "Microsoft.Network/networkSecurityGroups",
                            "apiVersion": "2020-06-01",
                            "name": "[variables('nsg1Name')]",
                            "location": "[resourceGroup().location]",
                            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
                            "properties": {
                                "securityRules": "[union(variables('nsg1Array'), variables('outboundNsgRule'))]"
                            },
                            "condition": "[not(empty(parameters('nsg1')))]"
                        },
                        {
                            "type": "Microsoft.Network/routeTables",
                            "apiVersion": "2020-06-01",
                            "copy": {
                                "name": "routeTableLoop",
                                "count": "[parameters('numSubnets')]"
                            },
                            "name": "[concat('route-table-subnet-0', copyIndex(1))]",
                            "location": "[resourceGroup().location]",
                            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]"
                        },
                        {
                            "apiVersion": "2020-06-01",
                            "condition": "[parameters('createNatGateway')]",
                            "location": "[resourceGroup().location]",
                            "name": "[variables('natGatewayPublicIpName')]",
                            "properties": {
                                "idleTimeoutInMinutes": 30,
                                "publicIPAllocationMethod": "Static"
                            },
                            "sku": {
                                "name": "Standard"
                            },
                            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
                            "type": "Microsoft.Network/publicIPAddresses"
                        },
                        {
                            "apiVersion": "2020-06-01",
                            "dependsOn": [
                                "[variables('natGatewayPublicIpName')]"
                            ],
                            "location": "[resourceGroup().location]",
                            "condition": "[parameters('createNatGateway')]",
                            "name": "[variables('natGatewayName')]",
                            "sku": {
                                "name": "Standard"
                            },
                            "properties": {
                                "idleTimeoutInMinutes": 4,
                                "publicIpAddresses": [
                                    {
                                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('natGatewayPublicIpName'))]"
                                    }
                                ]
                            },
                            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
                            "type": "Microsoft.Network/natGateways"
                        },
                        {
                            "type": "Microsoft.Network/virtualNetworks",
                            "apiVersion": "2020-06-01",
                            "dependsOn": [
                                "routeTableLoop",
                                "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]",
                                "[variables('nsg0Name')]",
                                "[variables('nsg1Name')]"
                            ],
                            "name": "[parameters('vnetName')]",
                            "location": "[resourceGroup().location]",
                            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
                            "properties": {
                                "addressSpace": {
                                    "addressPrefixes": [
                                        "[concat(parameters('vnetAddressPrefix'), '.0.0/', parameters('vnetCidrNotation'))]"
                                    ]
                                },
                                "subnets": "[variables('constructSubnetArray')]"
                            }
                        }
                    ],
                    "outputs": {
                        "routeTables": {
                            "condition": "[greaterOrEquals(parameters('numSubnets'), 1)]",
                            "copy": {
                                "count": "[parameters('numSubnets')]",
                                "input": "[resourceId('Microsoft.Network/routeTables', concat('route-table-subnet-0', copyIndex(1)))]"
                            },
                            "type": "Array"
                        },
                        "natGateway": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
                        },
                        "subnets": {
                            "condition": "[greaterOrEquals(parameters('numSubnets'), 1)]",
                            "copy": {
                                "count": "[parameters('numSubnets')]",
                                "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), concat('subnet-0', copyIndex(1)))]"
                            },
                            "type": "Array"
                        },
                        "virtualNetwork": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        },
                        "nsg0Id": {
                            "condition": "[not(empty(parameters('nsg0')))]",
                            "type": "string",
                            "value": "[variables('nsg0Id')[0]]"
                        },
                        "nsg1Id": {
                            "condition": "[not(empty(parameters('nsg1')))]",
                            "type": "string",
                            "value": "[variables('nsg1Id')[0]]"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed.')]"
        },
        "subnets": {
            "type": "array",
            "value": "[reference('networkTemplate-network').outputs.subnets.value]"
        }
    }
}
